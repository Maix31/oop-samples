#pragma once

#include "stdafx.h"

#include "Address.h"

using namespace std;

class Person { 

	/* това са частни променливи (член-данни). те са видими само в методите на класа */
	/* написани са с _ пред името, за да може да се въведат getter/setter методи */

private : 
	char* _name;
	char* _family;

	/* това вече е композиция, а не наследяване 
		
		тук имаме отношение has-a

		Person -has-an- address
	
	*/

	Address _address;

/* това е частен метод, той може да бъде извикван само от методите на класа
	или от наследените методи */

	void init(); 
	void destroy();
	
	/* ...скрити методи... */

	void print(ostream&);
	void read(istream&); 

	void print();

public:

	/* конструктор и деструктор следва да са public, за да може да се използва класа */

	Person();
	Person(char*, char* );

	~Person();

	/* за да се достъпват 'частните' (private) данни на класа обикновено се създават помощни
	методи - gettters и setters. използването им помага за проверка на данните при задаването
	и капсулира данните, така че да са достъпни само във вида, в който предпочитаме. 

	възможно е с помощен setter да взимаме обобщение, което е резултат от използване на няколко
	променливи */

	char* name(const char* );
	char* family(const char* );

	/* дефинирах операторите в тялото на класа?! но те не са методи 

	това се прави, за да се укаже, че дадена функция, която не е метод
	на класа Х има достъп до неговите частни променливи. 

	операторите СА реализирани ЧРЕЗ функции. т.е. са функции, които 
	са външни за класа. когато кажем, че са friend, те ще имат достъп
	до променливите в съответния клас */

	friend ostream& operator << (ostream&, Person &);
	friend istream& operator >> (istream&, Person &);

protected: 
	int _age;

public: 
	int age( int );
};
