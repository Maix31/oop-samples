#include <iostream>
#include <iomanip>

#include "StudentCollection.h"

void TestUcn()
{
    // Valid UCNs generated by http://georgi.unixsol.org/programs/egn.php

    // For each test the first value is the UCN and the rest of the
    // values are the expected results of each function call:
    // { UCN, day, month, year, ismale, isDateValid, isChecksumValid, isValid}
    // The last item in the test array must have a UCN of zero
    unsigned long long Tests[][8] = {
        { 1805122980, 12,  5, 1918, 1, 1, 1, 1 },

        { 5712131070, 13, 12, 1957, 0, 1, 1, 1 },

        { 5023123363, 12,  3, 1850, 1, 1, 1, 1 },

        { 5022284810, 28,  2, 1850, 0, 1, 1, 1 },

        { 5049142391, 14,  9, 2050, 0, 1, 1, 1 },

        { 5050062163,  6, 10, 2050, 1, 1, 1, 1 },

        // некоректна дата, коректна контролна сума
        { 5063123362, 12,  3, 2050, 1, 0, 1, 0 },

        // коректна дата, некоректна контролна сума
        { 5050062161,  6, 10, 2050, 1, 1, 0, 0 },

        { 0, 0, 0, 0, 0, 0, 0, 0 }

    };

    std::cout << "Testing UCN\n";
    std::cout << "The format of values in the test is (<calculated>/<expected>):\n\n";

    for (int i = 0; Tests[i][0]; ++i)
    {
        Ucn obj(Tests[i][0]);

        bool check =
            obj.GetDay() == Tests[i][1] &&
            obj.GetMonth() == Tests[i][2] &&
            obj.GetYear() == Tests[i][3] &&
            obj.IsMale() == Tests[i][4] &&
            obj.IsFemale() == !Tests[i][4] &&
            obj.VerifyDate() == Tests[i][5] &&
            obj.VerifyChecksum() == Tests[i][6] &&
            obj.IsValid() == Tests[i][7];

        std::cout
            << std::setw(6) << (check ? "OK" : "Failed") << ": "
            << "Ucn(" << Tests[i][0] << "), "
            << "GetDay("         << obj.GetDay()          << "/" <<  Tests[i][1] << "), "
            << "GetMonth("       << obj.GetMonth()        << "/" <<  Tests[i][2] << "), "
            << "GetYear("        << obj.GetYear()         << "/" <<  Tests[i][3] << "), "
            << "IsMale("         << obj.IsMale()          << "/" <<  Tests[i][4] << "), "
            << "IsFemale("       << obj.IsFemale()        << "/" << !Tests[i][4] << "), "
            << "VerifyDate("     << obj.VerifyDate()      << "/" <<  Tests[i][5] << "), "
            << "VerifyChecksum(" << obj.VerifyChecksum()  << "/" <<  Tests[i][6] << "), "
            << "IsValid("        << obj.IsValid()         << "/" <<  Tests[i][7] << ")\n\n";
    }


}

void TestStudentClass()
{
    std::cout << "\n== Enter TestStudentClass()\n";

    Student::PrintSizeInfo();

    std::cout << "\n== Create a single object\n";
    Student s;
    s.Print();

    s.SetName("Ivan");
    s.Print();

    s.SetFn(12345);
    s.SetName("Ivan Ivanov");
    s.SetPhone("+359887123456");
    s.Print();

    // Create and copy objects
    std::cout << "\n== Create another object and copy from the first one (copy constructor)\n";
    Student t = s;

    std::cout << "\n== Create another object and copy from the first one (copy constructor)\n";
    Student q;
    q = s;

    // Create and free an array of objects
    std::cout << "\n== Create and free an array of objects\n";
    Student *parr = new Student[5];
    delete[] parr;

    // Create and free a single object
    std::cout << "\n== Create and free a single object\n";
    Student *p = new Student(12345, "Ivan Ivanov", "1234567890");
    delete p;

    std::cout << "\n== Leave TestStudentClass()\n";
}


int main()
{
    TestUcn();
    TestStudentClass();

    return 0;
}